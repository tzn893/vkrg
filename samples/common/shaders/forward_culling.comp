#version 450
#include "tile.glsli"
#include "light.glsli"

#extension GL_EXT_debug_printf : enable


#ifndef TILE_SIZE
#define TILE_SIZE (16)
#endif

#define TILE_STRIDE (TILE_SIZE * TILE_SIZE)

layout (local_size_x = TILE_SIZE,local_size_y = TILE_SIZE) in;

layout(set = 0, binding = 0) uniform LightUBO
{
	Light lights[2047];
    int   count;
} lightUBO;

layout(set = 0, binding = 1) uniform CameraUBO
{
    Camera camera;
} cameraUBO;

layout(set = 0, binding = 2) uniform ScreenUBO
{
    Screen ubo;
} screenUBO;

/*
layout(set = 0, binding = 3) buffer CullingResult
{
    // currently we assume maximun screenUBO resolution is 1920x1080
    TileLighting tileLighting[8100];
} cullingResult;
*/

layout(set = 0, binding = 3) buffer CullLightGrid
{
    LightGrid grid;
} lightGrid;

layout(set = 0, binding = 4) buffer LightIndexUBO
{
    LightIndexBuffer indices;
} lightIndex;

layout(set = 0, binding = 5) buffer LightCounter
{
    int lightCounter;
} lightCounter;

layout(set = 0, binding = 6) uniform sampler2D depthSampler;

shared uint  lights[TILE_MAX_LIGHT_COUNT];
shared int   lightCount;

shared uint  tileMinDepth;
shared uint  tileMaxDepth;

vec4 computeLightBoundingSphere(Light light)
{
    float r = light.intensity.w;
    return vec4( light.vec.xyz, r);
}   

vec2 getTileMaxMinDepth()
{
    float ftileMaxDepth = uintBitsToFloat(tileMaxDepth);
    float ftileMinDepth = uintBitsToFloat(tileMinDepth);

    return vec2(ftileMaxDepth, ftileMinDepth);
}

void printFrustrum(Frustrum frustrum)
{
    debugPrintfEXT("plane0:%f,%f,%f,%f",frustrum.plane[0].x,frustrum.plane[0].y,frustrum.plane[0].z,frustrum.plane[0].w);
    debugPrintfEXT("plane1:%f,%f,%f,%f",frustrum.plane[1].x,frustrum.plane[1].y,frustrum.plane[1].z,frustrum.plane[1].w);
    debugPrintfEXT("plane2:%f,%f,%f,%f",frustrum.plane[2].x,frustrum.plane[2].y,frustrum.plane[2].z,frustrum.plane[2].w);
    debugPrintfEXT("plane3:%f,%f,%f,%f",frustrum.plane[3].x,frustrum.plane[3].y,frustrum.plane[3].z,frustrum.plane[3].w);
    debugPrintfEXT("plane4:%f,%f,%f,%f",frustrum.plane[4].x,frustrum.plane[4].y,frustrum.plane[4].z,frustrum.plane[4].w);
    debugPrintfEXT("plane5:%f,%f,%f,%f",frustrum.plane[5].x,frustrum.plane[5].y,frustrum.plane[5].z,frustrum.plane[5].w);
}

Frustrum computeFrustrum()
{
    // reference https://zhuanlan.zhihu.com/p/491340245
    mat4  m = cameraUBO.camera.projection * cameraUBO.camera.view;
    uvec2 groupID = gl_WorkGroupID.xy;

    float x_tile_size = 2 * screenUBO.ubo.tileCount.z;
    float y_tile_size = 2 * screenUBO.ubo.tileCount.w;

    // ndc coordinate
    float u_tile = groupID.x * x_tile_size - 1;
    float u_tile_1 = u_tile + x_tile_size;

    float v_tile = groupID.y * y_tile_size - 1;
    float v_tile_1 = v_tile + y_tile_size;

    vec2 tileMaxMinDepth = getTileMaxMinDepth();
    
    Frustrum frustrum = ComputeCameraFrustrum(u_tile, u_tile_1, v_tile, v_tile_1, 0, 1, cameraUBO.camera);

    return frustrum;
}

void computeTileMaxMinDepth()
{
    vec2 tile_uv = vec2(gl_GlobalInvocationID.xy) * screenUBO.ubo.resolution.zw;
    float depth = texture(depthSampler, tile_uv).x;

    uint udepth = floatBitsToUint(depth);

    atomicMax(tileMaxDepth, udepth);
    atomicMin(tileMinDepth, udepth);

    barrier();
}



void main()
{
    lightCount = 0;
    tileMaxDepth = 0;
    tileMinDepth = 4294967295;
    barrier();

    computeTileMaxMinDepth();


    ivec2 groupID = ivec2(gl_WorkGroupID.xy);
    int tileIdx = int(screenUBO.ubo.tileCount.x) * groupID.y + groupID.x;

    // TODO 实现计算当前tile对应的frustrum
    Frustrum frustrum = computeFrustrum();
    int threadIdx = int(gl_LocalInvocationID.x)  + int(gl_LocalInvocationID.y) * TILE_SIZE; 
    
    // 并行的对当前tile以及所有Light做剔除
    for(int i = threadIdx; i < lightUBO.count; i += TILE_STRIDE)
    {
        Light light = lightUBO.lights[i];

        if(light.vec.w == LIGHT_TYPE_DIRECT)
        {
            continue;
        }

        vec4 sphere = computeLightBoundingSphere(light);

        if(FrustrumSphereIntersection(frustrum, sphere) == TRUE)
        {
            int lightIdx = atomicAdd(lightCount, 1);
            if(lightIdx < 1024)
            {
                lights[lightIdx] = i;
            }
        }
    }

    barrier();
    // 将剔除结果加到culling result中
    if(gl_LocalInvocationID.x != 0 || gl_LocalInvocationID.y != 0) return;
    
    lightCount = min(lightCount, 1024);

    int offset = atomicAdd(lightCounter.lightCounter, lightCount);
    int count = lightCount;

    lightGrid.grid.grid[tileIdx] = uvec2(offset, count);
    for(uint i = 0; i < count;i++)
    {
        lightIndex.indices.indices[offset + i] = lights[i];
    }   
}