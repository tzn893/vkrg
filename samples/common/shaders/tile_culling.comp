#version 450
#include "tile.glsli"
#include "light.glsli"

#extension GL_EXT_debug_printf : enable

#define TRUE (1)
#define FALSE (0)

#ifndef TILE_SIZE
#define TILE_SIZE (16)
#endif

#define TILE_STRIDE (TILE_SIZE * TILE_SIZE)

layout (local_size_x = TILE_SIZE,local_size_y = TILE_SIZE) in;

layout(set = 0, binding = 0) uniform LightUBO
{
	Light lights[2047];
    int   count;
} lightUBO;

layout(set = 0, binding = 1) uniform CameraUBO
{
    Camera camera;
} cameraUBO;

layout(set = 0, binding = 2) uniform ScreenUBO
{
    Screen ubo;
} screenUBO;

layout(set = 0, binding = 3) buffer CullingResult
{
    // currently we assume maximun screenUBO resolution is 1920x1080
    TileLighting tileLighting[8100];
} cullingResult;

vec4 computeLightBoundingSphere(Light light)
{
    float r = light.intensity.w;
    return vec4( light.vec.xyz, r);
}   

int frustrumSphereIntersection(Frustrum frustrum, vec4 sphere)
{

    vec3  sphereOrigin = sphere.xyz;
    float sphereRadius = sphere.w;

    for(int i = 0; i < 6; i++)
    {
        vec4 plane = frustrum.plane[i];
        
        vec3    planeNormal   = plane.xyz;
        float   planeDistance = plane.w;

        float sphereDistance = dot(planeNormal, sphereOrigin);

        if(sphereDistance + planeDistance > sphereRadius)
        {
            return FALSE;
        }
    }

    return TRUE;
}

Frustrum computeFrustrum()
{
    // reference https://zhuanlan.zhihu.com/p/491340245
    mat4  m = cameraUBO.camera.projection * cameraUBO.camera.view;
    uvec2 groupID = gl_WorkGroupID.xy;

    float x_tile_size = 2 * screenUBO.ubo.tileCount.z;
    float y_tile_size = 2 * screenUBO.ubo.tileCount.w;

    // ndc coordinate
    float u_tile = groupID.x * x_tile_size - 1;
    float u_tile_1 = u_tile + x_tile_size;

    float v_tile = groupID.y * y_tile_size - 1;
    float v_tile_1 = v_tile + y_tile_size;
    
    Frustrum frustrum = ComputeCameraFrustrum(u_tile, u_tile_1, v_tile, v_tile_1, 0, 1, cameraUBO.camera);

    return frustrum;
}



shared Light lights[TILE_MAX_LIGHT_COUNT];
shared int   lightCount;

void main()
{
    lightCount = 0;
    barrier();

    ivec2 groupID = ivec2(gl_WorkGroupID.xy);
    int tileIdx = int(screenUBO.ubo.tileCount.x) * groupID.y + groupID.x;

    // TODO 实现计算当前tile对应的frustrum
    Frustrum frustrum = computeFrustrum();
    int threadIdx = int(gl_LocalInvocationID.x)  + int(gl_LocalInvocationID.y) * TILE_SIZE; 

    
    // 并行的对当前tile以及所有Light做剔除
    for(int i = threadIdx; i < lightUBO.count; i += TILE_STRIDE)
    {
        Light light = lightUBO.lights[i];

        if(light.vec.w == LIGHT_TYPE_DIRECT)
        {
            continue;
        }

        vec4 sphere = computeLightBoundingSphere(light);

        if(frustrumSphereIntersection(frustrum, sphere) == TRUE)
        {
            int lightIdx = atomicAdd(lightCount, 1);
            if(lightIdx < TILE_MAX_LIGHT_COUNT)
            {
                lights[lightIdx] = light;
            }

        }

    }

    barrier();

    //lightCount = min(lightCount, TILE_MAX_LIGHT_COUNT);

    // 将剔除结果加到culling result中
    if(gl_LocalInvocationID.x != 0 || gl_LocalInvocationID.y != 0) return;

    for(int i  = 0; i < lightCount; i++)
    {
        cullingResult.tileLighting[tileIdx].lights[i] = lights[i];
    }
    cullingResult.tileLighting[tileIdx].lightCount.x = lightCount;
}