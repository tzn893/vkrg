#version 450
#include "tile.glsli"

#extension GL_EXT_debug_printf : enable

#define TRUE (1)
#define FALSE (0)

#ifndef TILE_SIZE
#define TILE_SIZE (16)
#endif

#define TILE_STRIDE (TILE_SIZE * TILE_SIZE)

layout (local_size_x = TILE_SIZE,local_size_y = TILE_SIZE) in;

struct Frustrum
{
    // (x, y, z): normal of one frustrum plane
    // w: distance frustrum plane from original
    vec4 plane[6];
};

layout(set = 0, binding = 0) uniform LightUBO
{
	Light lights[2047];
    int   count;
} lightUBO;

layout(set = 0, binding = 1) uniform CameraUBO
{
    Camera camera;
} cameraUBO;

layout(set = 0, binding = 2) uniform ScreenUBO
{
    Screen ubo;
} screenUBO;

layout(set = 0, binding = 3) buffer CullingResult
{
    // currently we assume maximun screenUBO resolution is 1920x1080
    TileLighting tileLighting[8100];
} cullingResult;

vec4 computeLightBoundingSphere(Light light, out int culled)
{
    const float minimunIntensity = 0.05;
    float grayScale = dot(light.intensity.xyz, vec3(0.2126, 0.7152, 0.0722)) / minimunIntensity;

    culled = int(step(grayScale, 1));
    float r = sqrt(max(grayScale - 1, 0.0));
    
    return vec4( light.vec.xyz, r);
}   

int frustrumSphereIntersection(Frustrum frustrum, vec4 sphere)
{
    vec3  sphereOrigin = sphere.xyz;
    float sphereRadius = sphere.w;

    for(int i = 0; i < 6; i++)
    {
        vec4 plane = frustrum.plane[i];
        
        vec3    planeNormal   = plane.xyz;
        float   planeDistance = plane.w;

        float sphereDistance = dot(planeNormal, sphereOrigin);

        if(sphereDistance + planeDistance > sphereRadius)
        {
            return FALSE;
        }
    }

    return TRUE;
}

Frustrum computeFrustrum()
{
    // reference https://zhuanlan.zhihu.com/p/491340245
    mat4  m = cameraUBO.camera.projection * cameraUBO.camera.view;
    uvec2 groudID = gl_WorkGroupID.xy;

    float x_tile_size = 2 * screenUBO.ubo.tileCount.z;
    float y_tile_size = 2 * screenUBO.ubo.tileCount.w;

    // ndc coordinate
    float u_tile = groudID.x * x_tile_size - 1;
    float u_tile_1 = u_tile + x_tile_size;

    float v_tile = groudID.y * y_tile_size - 1;
    float v_tile_1 = v_tile + y_tile_size;

    vec4 right  = vec4(u_tile_1 *   m[3][0] - m[0][0], u_tile_1 *   m[3][1] - m[0][1], u_tile_1 *   m[3][2] - m[0][2], u_tile_1 *   m[3][3] - m[0][3]);
    vec4 up     = vec4(v_tile_1 *   m[3][0] - m[1][0], v_tile_1 *   m[3][1] - m[1][1], v_tile_1 *   m[3][2] - m[1][2], v_tile_1 *   m[3][3] - m[1][3]);
    vec4 front  = vec4(/*1 **/      m[3][0] - m[2][0], /*1 **/      m[3][1] - m[2][1], /*1 **/      m[3][2] - m[2][2], /*1 **/      m[3][3] - m[2][3]);
    
    vec4 left   = vec4( m[0][0] - u_tile * m[3][0], m[0][1] - u_tile * m[3][1], m[0][2] - u_tile * m[3][2], m[0][3] - u_tile * m[3][3]);
    vec4 down   = vec4( m[1][0] - v_tile * m[3][0], m[1][1] - v_tile * m[3][1], m[1][2] - v_tile * m[3][2], m[1][3] - v_tile * m[3][3]);
    vec4 back   = vec4( m[2][0]/* - 0 * m[3][0] */, m[2][1]/* - 0 * m[3][1] */, m[2][2]/*-  0 * m[3][2] */, m[2][3]/* - 0 * m[3][3] */);
    
    Frustrum frustrum;
    frustrum.plane[0] = right;
    frustrum.plane[1] = left;
    frustrum.plane[2] = up;
    frustrum.plane[3] = down;
    frustrum.plane[4] = front;
    frustrum.plane[5] = back;

    return frustrum;
}


shared Light lights[15];
shared int   lightCount;

void main()
{
    ivec2 groupID = ivec2(gl_WorkGroupID.xy);
    int tileIdx = int(screenUBO.ubo.tileCount.x) * groupID.y + groupID.x;

    // TODO 实现计算当前tile对应的frustrum
    Frustrum frustrum = computeFrustrum();
    int threadIdx = int(gl_LocalInvocationID.x)  + int(gl_LocalInvocationID.y) * TILE_SIZE; 

    // 并行的对当前tile以及所有Light做剔除
    for(int i = threadIdx; i < lightUBO.count; i += TILE_STRIDE)
    {
        Light light = lights[i];

        if(light.vec.w == LIGHT_TYPE_DIRECT)
        {
            continue;
        }

        int culled = FALSE;
        vec4 sphere = computeLightBoundingSphere(light, culled);

        if(culled == TRUE)
        {
            continue;
        }

        if(frustrumSphereIntersection(frustrum, sphere) == TRUE)
        {
            int lightIdx = atomicAdd(lightCount, 1);
            lights[lightIdx] = light;
        }
    }

    barrier();

    // 将剔除结果加到culling result中
    if(gl_LocalInvocationID.x != 0 || gl_LocalInvocationID.y != 0) return;

    TileLighting tlight;
    for(int i  = 0; i < lightCount; i++)
    {
        tlight.lights[i] = lights[i];
    }
    tlight.lightCount.x = lightCount;

    cullingResult.tileLighting[tileIdx] = tlight;
}